q
@serial
array.join
@serial.match? /[#{array.join}]/
array
q
@serial.match? /[ql]/
@serial.match? /[oql]/
@serial.match? /o/
@serial.match? /q/
@serial.match? /1q
@serial.match? /1/
@serial
@serial.match? /o/
@serial.match? /\d/
array.join
array
@serial.match? /[oql]/
@serial = '1234o'
@serial.match? /[oql]/
@serial
email
@serial
q
'1234' =~ /[oql]/
'1234oql' =~ /[oql]/
'1234oql' =~ /[^oql]/
@serial
@serial =~ /[^oql]/
@serial.match? /[^oql]/
@serial = '1234'
@serial
@serial.match? /[^oql]/
@serial
 /[^oql]/ === @serial
@serial = '1234o'
 /[^oql]/ === @serial
@serial
 /[^z]/ === @serial
'123457'.match /5/
'123457'.match /[^z]/
'123457'.match /[^o]/
"Hello abc awesome world".scan /[^(abc)]+/
@serial
array
q
array.join
array
q
array.join
array
@serial
q
brand_rule
q
brand_rule
q
send(check, arg)
send(check).with(arg)
continue
check
q
@checks
q
arg
c
check(check, arg)[false]
check(check, arg)[true]
q
check(check, arg)
q
checks
check(check, arg)
q
arg
check
q
arg
check
checks
q
check
checks
arg
check
q
value
key
q
y
cq
value
key
q
name
rules
rules 
hash
name
q
arg
getsome
q
getsome
getsome = condition
'condition'
arg
condition
q
arg
@deductions
rules
rule
q
arg
q
rule
arg
q
rule
ruel
arg
rule
c
arg
@serial.size
q
arg
rule
q
arg
rule
q
arg
rule
q
rc.class
rc
c
  condition
condition
q
hash
jasj
q
condition
c
rc
c
condition
c
condition
q
conditions
q
rule
q
rule
name
rule
name
q
rules
q
c
rule 
name
q
c
q
qy
q
rules
c
rules
c
rule[:conditions]
rule
q
rule
rule[:condition].include? @serial.size
rule[:condition]
@serial.size
q
rule[:condition]
rule
rule[:size_range]
q
rule
q
rule
name
q
@rules
rule
name
rule
name
c
rule
name
q
rule
